//@FileName Goat.Utility.Merlin.Lib/FileManager.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace Goat.Utility.Merlin.Lib
{
    public class FileManager
    {
        private readonly ILogger _logger;

        public FileManager(ILogger logger)
        {
            _logger = logger;
        }

        public static List<string> GetFilesToMerge(string sourceDirectory, IEnumerable<string> patterns)
        {
            var includePatterns = new List<string>();
            var excludePatterns = new List<string>();

            foreach (var pattern in patterns)
            {
                if (pattern.StartsWith("!"))
                    excludePatterns.Add(pattern.Substring(1));
                else
                    includePatterns.Add(pattern);
            }

            return Directory
                    .GetFiles(sourceDirectory, "*.*", SearchOption.AllDirectories)
                    .Where(file => ShouldIncludeFile(file, includePatterns, excludePatterns))
                    .ToList();
        }

        private static bool ShouldIncludeFile(string file, List<string> includePatterns, List<string> excludePatterns)
        {
            var fileName = Path.GetFileName(file);

            if (includePatterns.Count == 0 || includePatterns.Any(p => MatchesPattern(fileName, p)))
            {
                return !excludePatterns.Any(p => MatchesPattern(fileName, p));
            }

            return false;
        }

        private static bool MatchesPattern(string fileName, string pattern)
        {
            return Regex.IsMatch(fileName, "^" + Regex.Escape(pattern).Replace("\\*", ".*").Replace("\\?", ".") + "$");
        }

        public async Task MergeFilesAsync(List<string> files, string outputFile, string encoding)
        {
            await using var writer = new StreamWriter(outputFile, false, Encoding.GetEncoding(encoding));

            await WriteFileHeader(writer, files);

            foreach (var file in files)
            {
                var relativePath = Path.GetRelativePath(Directory.GetCurrentDirectory(), file);
                var segments = relativePath.Split(new[] { @"\", @"/" }, StringSplitOptions.None);
                await writer.WriteLineAsync($"//@FileName {string.Join(@"/",segments)}");
                await writer.WriteLineAsync(await File.ReadAllTextAsync(file, Encoding.GetEncoding(encoding)));
                _logger.LogInformation($"Merged file: {relativePath}");
            }
        }

        private async Task WriteFileHeader(StreamWriter writer, List<string> files)
        {
            var prompt = await File.ReadAllTextAsync("Goat.Utility.Merlin.Lib/Prompt.txt");
            var headerContent = string.Format(prompt,
                DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                files.Count,
                string.Join("\n//@Header * ", files.Select(f => Path.GetRelativePath(Directory.GetCurrentDirectory(), f)))
            );

            foreach (var line in headerContent.Split('\n'))
            {
                await writer.WriteLineAsync($"//@Header {line.TrimEnd()}");
            }
            await writer.WriteLineAsync();
        }

        public async Task ExtractFilesAsync(string inputFile, string outputDirectory, string encoding)
        {
            var currentFile = "";
            var fileContent = new List<string>();

            using var reader = new StreamReader(inputFile, Encoding.GetEncoding(encoding));
            string? line = null;

            while ((line = await reader.ReadLineAsync()) != null)
            {
                if (line.StartsWith("//@Header"))
                {
                    continue; // Ignore header lines
                }

                if (line.StartsWith("//@FileName"))
                {
                    if (currentFile != "")
                    {
                        await WriteExtractedFileAsync(currentFile, fileContent, outputDirectory, encoding);
                        fileContent.Clear();
                    }
                    currentFile = line.Substring(11).Trim();
                }
                else
                {
                    fileContent.Add(line);
                }
            }

            if (currentFile != "")
            {
                await WriteExtractedFileAsync(currentFile, fileContent, outputDirectory, encoding);
            }
        }

        private async Task WriteExtractedFileAsync(string filePath, List<string> content, string outputDirectory, string encoding)
        {
            var fullPath = Path.Combine(outputDirectory, filePath);
            var directory = Path.GetDirectoryName(fullPath);
            if (string.IsNullOrEmpty(directory))
                throw new InvalidOperationException("Invalid output directory");

            if (!Directory.Exists(directory))
                Directory.CreateDirectory(directory);

            await File.WriteAllLinesAsync(fullPath, content, Encoding.GetEncoding(encoding));
            _logger.LogInformation($"Extracted file: {fullPath}");
        }
    }
}

//@FileName Goat.Utility.Merlin.Lib/Prompt.txt
This file contains merged content generated by the Merlin File Manager utility.

Generation Date: {0}
Total Files Merged: {1}

Files included in this merge:
{2}

Instructions:
1. This file is a compilation of multiple source files.
2. Each section starts with a //@FileName comment indicating the original file path.
3. To modify specific sections, locate the corresponding //@FileName comment.
4. When extracting, use the Merlin utility with the 'extract' command to separate the files.
5. For any changes, it's recommended to modify the original source files and re-run the merge process.

Note: This file is auto-generated. Manual changes may be overwritten in future merges.
